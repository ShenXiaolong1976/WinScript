windbg ANSI Command Tree 1.0
title {"command for current range : @$scopeip"}
body
{"-----------------reload panel----------------"}{".cmds; .cur;"}

{"Exception code"} {".exr -1"}
{"Exception stacks"} {".ecxr"}
{"try to show whole except stacks"} {".reload /u ntdll.dll ; .reload ; .cxr ;"}
{"current local context instruction address (@$scopeip)"}               {"? @$scopeip  ;"}
{"more..."}
 {"Stack of exception thread"} {"~#kv99"}
 {"Stack of current thread"} {"~.kP99"}
 {"switch to exception capture thread"} {"~#s"}
 {"switch to exception thread"} {".exp"}
 {"switch to possible exception thread"} {".foreach /pS 3 /ps 10 ( val { .shell -ci "~#kv" find /i "UnhandledExceptionFilter" } ) { .cxr poi(${val}+4) }"}
 {"list current source code"} {"lsa @$scopeip"}
 {"List current function source file path"} {"ln @$scopeip;"}
 {"unassemble executed code(forward)"} {"ub @$scopeip;"}
 {"unassemble executing code(backward)"} {"u @$scopeip;"}

{""}
{"goto target file"} {" .shell -ci "*" explorer.exe /select, "${targetFullPath}""}
{"goto more ..."}
 {"open windbg log"} {".log ;"}
 {"goto symbol"} {" .shell -ci "!chksym @$scopeip;" find /i "Loaded pdb is" | clip & cmd.exe /c ${WinScriptPath}\windbg\script\cmds\common.bat gotoFileFromClip "Loaded pdb is " "}
 {"goto module"} {" .shell -ci "lmv a @$scopeip;" find /i "Image path:" | clip & cmd.exe /c ${WinScriptPath}\windbg\script\cmds\common.bat gotoFileFromClip "Image path: " "}
 {"goto target folder"} {".shell -ci "*" cmd.exe /c start . ;"}
 {"goto image file"} {" .shell -ci "*" explorer.exe /select, "${exeFolderPath}\${exeModuleName}.exe""}

{""}
{"module basic info (!chksym)"} {".foreach ( val { lm1m a @$scopeip ; }) {!chksym ${val}}"}
{"collect symbols file list(.txt) in current thread"} {"$$>a<${WinScriptPath}\windbg\script\cmds\collectOfflineSymbols.dbg curStack"}
{"collect current module symbol(.txt)"} {"$$>a<${WinScriptPath}\windbg\script\cmds\collectOfflineSymbols.dbg  curOne"}
{"more symbol load"}
 {"reload current module and symbol exactly"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { .echo .reload /f ${val};.reload /f ${val};}"}
 {"reload current module without verify symbol"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { .reload /i ${val};}"}
 {"re-download current module symbol to overwriten and re-load symbol"}{".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) {.echo .reload /o /f ${val};.reload /o /f ${val};};"}
 {"unload current module symbol"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { ;aS ${/v:curMod} ${val} ;.reload /u ${val};}"}
 {"load current module without symbol which is unloaded just now"} {".if(0!=${/d:curMod}){ .reload ${curMod} } .else { .echo no unloaded modue is recorded.; } "}
{"more symbol collect"}
 {"collect all symbols file list manifest(.txt)"} {"$$>a<${WinScriptPath}\windbg\script\cmds\collectOfflineSymbols.dbg"}
 {"collect basic MS system symbols file list manifest(.txt)"} {".echo TODO ...;"}
 {"collect all MS system symbols file list manifest(.txt)"} {".echo TODO ...;"}
 {"collect all user symbols file list manifest(.txt)"} {".echo TODO ...;"}
 {"backup loaded module symbol(.pdb) only"} {"$$>a<${WinScriptPath}\windbg\script\cmds\collectOfflineSymbols.dbg  backupLoaded"}
 {"backup all module symbol(.pdb)"} {"$$>a<${WinScriptPath}\windbg\script\cmds\collectOfflineSymbols.dbg  backupAll"}
{"more..."}
 {"detects corruption module"}{".foreach ( val { lm1m a @$scopeip ; }) {!chkimg -lo 50 -d !${val} -v ;}"}
 {"module name"}{"lm1m a @$scopeip ;"}
 {"module path"}{".shell -ci "lmv a @$scopeip;" find /i "Image path:""} 
 {"expected symbol file(pdb) path"}{".foreach ( val { lm1m a @$scopeip ; }) { .shell -ci "!chksym ${val}" find /i "pdb:"  };"}
 {"module symbol summary"}{"lma @$scopeip;"}
 {"module all information"}{"lmv a @$scopeip; !lmi @$scopeip;!chksym @$scopeip;"}

{""}
{"global variable in current module"}{".foreach ( val { lm1m a @$scopeip ; }) {.echo x ${val}!*dynamic initializer for*;x ${val}!*dynamic initializer for*;};"}
{"global variable in function scope(getInstance)"}{".foreach ( val { lm1m a @$scopeip ; }) {.echo x ${val}!*::getInstance;x ${val}!*::getInstance;};"}
{"more data ..."}
 {"show all string in current module"}                       {"$$>a<${WinScriptPath}\windbg\script\cmds\dump\dumpAllStringInCurModule.dbg"}
 {"show all string in current thread stack(used range)"}     {"s -sa @@C++(@$teb->NtTib.StackLimit)   @@C++(@$teb->NtTib.StackBase)"}
 {"show all string in current thread stack"}                 {"s -sa @@C++(@$teb->DeallocationStack)  @@C++(@$teb->NtTib.StackBase)"}
 {"show all symbol in current thread stack(used range)"}     {"dds   @@C++(@$teb->NtTib.StackLimit)   @@C++(@$teb->NtTib.StackBase)"}
 {"show all symbol in current thread stack"}                 {"dds   @@C++(@$teb->DeallocationStack)  @@C++(@$teb->NtTib.StackBase)"}
 {"all type symbol in current module"}                       {".foreach ( val { lm1m a @$scopeip ; }) {.echo dt ${val}!*;dt ${val}!*;};"}