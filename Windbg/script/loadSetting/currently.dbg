windbg ANSI Command Tree 1.0
title {"command for current function"}
body
{"-----------------reload panel----------------"}{".cmds; .cur;"}
{"jabber version"} {"lmvm ciscojabber;.echo ;.jver"}
{"jabber crash thread"} {".foreach /pS 3 /ps 10 ( val { .shell -ci "~#kv" find /i "UnhandledExceptionFilter" } ) { .cxr poi(${val}+4) }"}
{"search crash in log"}{".echo topLevelRuntimeExpectionFilter|hangDetectionLoop|startJabberPrt is copied into clipboard; .jlog;"}
{"jabber prt thread"} {"~#;~#kP;"}
{"load jabber source on local path"}{".jsrc ;"}
{"load third-part lib source on local path"}{".jlib ;"}
{"open Git console for jabber"}{".jgit ;"}
{"open visual studio for jabber"}{".jsln ;"}
{"load jabber libcef symbol and source"}{".jcef ;"}
{"fix current jabber pdb symbol"}{".jfix ;"}
{"new dump analysis session"}{".shell -ci "*" cmd.exe /c start ${WinScriptPath}\Companys\cisco\contextMenu\jabberPRT.bat "${$CurrentDumpFile}" analysis"}


{""}
{"Exception code"} {".exr -1"}
{"Exception stacks"} {".ecxr"}
{"Stack of exception thread"} {"~#kv99"}
{"Stack of current thread"} {"~.kP99"}
{"switch to exception capture thread"} {"~#s"}
{"switch to exception thread"} {".foreach /pS 3 /ps 10 ( val { .shell -ci "~#kv" find /i "UnhandledExceptionFilter" } ) { .cxr poi(${val}+4) }"}
{"try to show whole except stacks"} {".reload /u ntdll.dll ; .reload ;"}

{""}
{"show all string in current module"}               {"$$>a<${WinScriptPath}\windbg\script\cmds\dump\dumpAllStringInCurModule.dbg"}
{"show all string in current thread stack(used)"}   {"s -sa @@C++(@$teb->NtTib.StackLimit)   @@C++(@$teb->NtTib.StackBase)"}
{"show all string in current thread stack"}         {"s -sa @@C++(@$teb->DeallocationStack)  @@C++(@$teb->NtTib.StackBase)"}
{"show all symbol in current thread stack(used)"}   {"dds   @@C++(@$teb->NtTib.StackLimit)   @@C++(@$teb->NtTib.StackBase)"}
{"show all symbol in current thread stack"}         {"dds   @@C++(@$teb->DeallocationStack)  @@C++(@$teb->NtTib.StackBase)"}

{""}
{"module name"}{"lm1m a @$scopeip ;"}
{"module basic info (lmv)"} {"lmv a @$scopeip; !lmi @$scopeip;!chksym @$scopeip;"}
{"goto image file"} {" .shell -ci "*" explorer.exe /select, "${exeFolderPath}\${exeModuleName}.exe""}
{"goto module"} {" .shell -ci "lmv a @$scopeip;" find /i "Image path:" > tempModPath.txt | ${WinScriptPath}\windbg\script\cmds\gotoFile.bat "tempModPath.txt""}
{"goto symbol"} {" .foreach /pS 3 /ps 8    (val    { .shell -ci "!chksym @$scopeip;" find /i "Loaded pdb is" }   )     {   .shell -ci "*" explorer.exe /select, "${val}" }; "}
{"goto target file"} {" .shell -ci "*" explorer.exe /select, "${targetFullPath}""}
{"goto target folder"} {".shell -ci "*" cmd.exe /c start . ;"}
{"open windbg log"} {".shell -ci "*" cmd.exe /c start ${WinScriptPath}\common\tools_txtFile.bat openTxtFile "${logFullPath}" ;"}
{"list current source code"} {"lsa @$scopeip"}
{"List current function source file path"} {"ln @$scopeip;"}
{"unassemble executed code(forward)"} {"ub @$scopeip;"}
{"unassemble executing code(backward)"} {"u @$scopeip;"}

{""}
{"all type symbol in current module"}{".foreach ( val { lm1m a @$scopeip ; }) {.echo dt ${val}!*;dt ${val}!*;};"}
{"current ATL module life-cycle"}{".foreach ( val { lm1m a @$scopeip ; }) {.echo x ${val}!_Module;x ${val}!_Module;};"}
{"global variable in current module"}{".foreach ( val { lm1m a @$scopeip ; }) {.echo x ${val}!*dynamic initializer for*;x ${val}!*dynamic initializer for*;};"}
{"global variable in function scope(getInstance)"}{".foreach ( val { lm1m a @$scopeip ; }) {.echo x ${val}!*::getInstance;x ${val}!*::getInstance;};"}


{""}
{"module path"}{".shell -ci "lmv a @$scopeip;" find /i "Image path:""}
{"expected pdb file path"}{".foreach ( val { lm1m a @$scopeip ; }) { .shell -ci "!chksym ${val}" find /i "pdb:"  };"}
{"module symbol summary"}{"lma @$scopeip;"}
{"module symbol detail/detects symbol match"}{".foreach ( val { lm1m a @$scopeip ; }) {!chksym ${val}}"}
{"detects corruption module"}{".foreach ( val { lm1m a @$scopeip ; }) {!chkimg -lo 50 -d !${val} -v ;}"}
{"unload current module symbol"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { ;aS ${/v:curMod} ${val} ;.reload /u ${val};}"}


{""}
{"collect current loaded symbols"} {"$$>a<${WinScriptPath}\windbg\script\cmds\collectOfflineSymbolsAll.dbg"}
{"reload current module and symbol exactly"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { .echo .reload /f ${val};.reload /f ${val};}"}
{"reload current module without verify symbol"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { .reload /i ${val};}"}
{"re-download current module symbol to overwriten and re-load symbol"}{".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) {.echo .reload /o /f ${val};.reload /o /f ${val};};"}
{"unload current module"} {".foreach /pS 3 /ps 10 (val { .shell -ci "lmn a  @$scopeip" find "." }) { ;aS ${/v:curMod} ${val} ;.reload /u ${val};}"}
{"load current module without symbol which is unloaded just now"} {".if(0!=${/d:curMod}){ .reload ${curMod} } .else { .echo no unloaded modue is recorded.; } "}


{""}
{"current local context instruction address (@$scopeip)"}               {"$$>a<${WinScriptPath}\windbg\script\cmds\listAllPseudoRegisters.dbg @$scopeip  ;"}