***********************************default extension****************************************************
!dbghelp.chksym
!dbghelp.dh
!dbghelp.homedir
!dbghelp.lmi
!dbghelp.stackdbg
!dbghelp.sym

!ext.AnalyzeWithWerAnalyzer
!ext.CreateWerAnalyzer
!ext.addrbias
!ext.analysis
!ext.analyzeuexception
!ext.asd
!ext.bft
!ext.chkallimg
!ext.chkimg
!ext.chksvctbl
!ext.createsprivateheap
!ext.cxr
!ext.dblob
!ext.ddstack
!ext.debugme
!ext.dml_proc
!ext.doescallhsi
!ext.dumpattr
!ext.dumpfa
!ext.dumptype
!ext.eflags
!ext.exr
!ext.fi
!ext.findgifs
!ext.findjpegs
!ext.findjpgs
!ext.findpngs
!ext.findthebuild
!ext.findxmldata
!ext.fis
!ext.for_each_function
!ext.for_each_module
!ext.for_each_process
!ext.for_each_register
!ext.for_each_thread
!ext.frame
!ext.framesize
!ext.frlo
!ext.gs
!ext.gsfriendlyinit
!ext.hashblob
!ext.hashcmdresults
!ext.hbdna
!ext.heap
!ext.heapcorruption
!ext.help
!ext.imports
!ext.inframe
!ext.inmodule
!ext.inthread
!ext.irop
!ext.iscomobject
!ext.isgsprotectedfunc
!ext.ismanagedmod
!ext.isnxcompat
!ext.isregobjptr
!ext.isresourceonly
!ext.istruncatedmodpointer
!ext.kup
!ext.ltoo
!ext.net_send
!ext.opcodemap
!ext.pooltag
!ext.r
!ext.recursive
!ext.rtlrbtree
!ext.ruleinfo
!ext.sel
!ext.showexports
!ext.showimports
!ext.showresources
!ext.solvebucket
!ext.stackusage
!ext.targetinfo
!ext.threads        - display Index | TID | TEB | StackBase | StackLimit | DeAlloc | StackSize | ThreadProc for all threads
!ext.ticket
!ext.trap
!ext.tss
!ext.u
!ext.ufs
!ext.url
!ext.usbdata
!ext.usesaslr
!ext.usesbannedapi
!ext.usessafeseh
!ext.whatdllnotfound
!ext.address [address]          - Displays the address space layout
             [-UsageType]       - Displays the address space regions of the given type
!ext.analyze [-v]               - Analyzes current exception or bugcheck
!ext.cpuid [processor]          - Displays CPU version info for all CPUs
!ext.elog_str <message>         - Logs simple message to host event log
!ext.cppexr <exraddress>        - Displays a C++ EXCEPTION_RECORD
!ext.error [errorcode]          - Displays Win32 & NTSTATUS error string
!ext.exchain                    - Displays exception chain for current thread
!ext.for_each_frame <cmd>       - Executes command for each frame in current thread, general use !for_each_local in !for_each_frame
!ext.for_each_local <cmd> $$<n> - Executes command for each local variable in current frame, use @#Local or substituting fixed-name alias $u<n> for each occurrence of $$<n>
!ext.gle [-all]                 - Displays last error & status for current thread
!ext.imggp <imagebase>          - Displays GP directory entry for 64-bit image
!ext.imgreloc <imagebase>       - Relocates modules for an image
!ext.list [-? | parameters]     - Displays lists
!ext.obja <address>             - Displays OBJECT_ATTRIBUTES[32|64]
!ext.owner [symbol!module]      - Detects owner for current exception or bugcheck from triage.ini
!ext.rtlavl <address>           - Displays RTL_AVL_TABLE
!ext.std_map <address>          - Displays a std::map<>
!ext.str <address>              - Displays ANSI_STRING or OEM_STRING
!ext.ustr <address>             - Displays UNICODE_STRING

!wow64exts.sw:            Switch between 32-bit and 64-bit mode
!wow64exts.k <count>:     Combined 32/64 stack trace
!wow64exts.info:          Dumps information about some important wow64 structures
!wow64exts.r [addr]:      Dumps x86 CONTEXT
!wow64exts.lf:            Dump/Set log flags
!wow64exts.l2f:           Enable logging to file

!exts.bievents
!exts.bipackages
!exts.bitcount
!exts.biworkitems
!exts.dllcheck
!exts.dlltree
!exts.envvar
!exts.exrlog
!exts.hashtable
!exts.hstring
!exts.hstring2
!exts.ldrnode
!exts.mui
!exts.psmapps
!exts.psmclientapps
!exts.psmtestapps
!exts.rebase
!exts.schema
!exts.services
!exts.time
!exts.udeadlock
!exts.winrterr
!exts.acl <address> [flags]        - Displays the ACL
!exts.atom <address>               - Displays the atom or table(s) for the process
!exts.avrf [-? | parameters]       - Displays or modifies App Verifier settings
!exts.cs [-? | parameters]         - Displays critical sections for the process
!exts.cxr                          - Obsolete, .cxr is new command
!exts.decodeptr32 <value>          - Decode encoded 32-bit pointer value (using process cookie)
!exts.decodeptr64 <value>          - Decode encoded 64-bit pointer value (using process cookie)
!exts.dlls [-h | parameters]       - Displays loaded DLLS
!exts.encodeptr32 <ptr>            - Encode 32-bit value for encoded pointer (using process cookie)
!exts.encodeptr64 <ptr>            - Encode 64-bit value for encoded pointer (using process cookie)
!exts.exr                          - Obsolete, .exr is new command
!exts.findthis [-? | options]     - Search the registers for the this pointer
!exts.gflag [-?|<value>]           - Displays the global flag
!exts.heap [-? | parameters]       - Displays heap info
!exts.help                         - Displays this list
!exts.kuser                        - Displays KUSER_SHARED_DATA
!exts.peb [address]                - Displays the PEB structure
!exts.psr <value>|@ipsr [flags]    - Displays an IA64 Processor Status Word
!exts.sd <address> [flags]         - Displays the SECURITY_DESCRIPTOR
!exts.shipassert                   - Displays ship asserts
!exts.sid <address> [flags]        - Displays the SID
!exts.slist [-? | parameters]      - Displays singly-linked list
!exts.stl [options] <varname>      - Dumps an STL variable
!exts.stltree [options] <address>  - Dumps an STL set, map, multiset, or multimap
!exts.teb [address]                - Displays the TEB structure
!exts.tls <slot | -1> [teb | 0]    - Dumps TLS slots. !tls /? for usage
!exts.token [-n|-?] <handle|addr>  - Displays TOKEN
!exts.tp <command>                 - Dump threadpool information

!uext.evlog       - Display information from the event log
!uext.findstack   - Find all stacks containing the given symbol
!uext.handle      - Display information about open handles
!uext.help        - Displays information on available extension commands
!uext.mapped_file - Retrieves the name of the file associated with the mapping containing the given address
!uext.runaway     - Display thread execution times
!uext.uniqstack   - Like debugger's built-in ~* k [b,v,p,n], but this will exclude stacks that look like other stacks already printed
!uext.vadump      - Display complete virtual memory layout description
!uext.vprot       - Dumps virtual memory info for the given address

!ntsdexts.hleak
!ntsdexts.htrace
!ntsdexts.runaway
!ntsdexts.threadtoken
!ntsdexts.!critSec csAddress           - Dump a critical section
!ntsdexts.!dp [v] [pid | pcsr_process] - Dump CSR process
!ntsdexts.!dreg -[d|w] <keyPath>[![<valueName> | *]]  - Dump registry information
!ntsdexts.!dt [v] pcsr_thread          - Dump CSR thread
!ntsdexts.!error value                 - Decode error value
!ntsdexts.!gatom                       - Dump the global atom table
!ntsdexts.!handle [handle]             - Dump handle information
!ntsdexts.!help [cmd]                  - Displays this list or gives details on command
!ntsdexts.!locks [-v][-o]              - Dump all Critical Sections in process

******************************non-default extension **********************************************************
https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/specialized-extensions
!Kdexts.acpicache [flags]            - Displays cached ACPI tables
!Kdexts.acpiinf                      - Displays ACPI Information structure
!Kdexts.acpiirqarb                   - Displays ACPI IRQ Arbiter data
!Kdexts.acpiresconflict              - Displays detail on resource conflicts that cause
!Kdexts.                               bugcheck 0xA5 (ACPI_ROOT_PCI_RESOURCE_FAILURE)
!Kdexts.ahcache [flags]              - Displays application compatibility cache
!Kdexts.amli <command|?> [params]    - Use AMLI debugger extensions
!Kdexts.apc [[proc|thre] <address>]  - Displays Asynchronous Procedure Calls
!Kdexts.arbiter [flags]              - Displays all arbiters and arbitrated ranges
!Kdexts.arblist <address> [flags]    - Dump set of resources being arbitrated
!Kdexts.bcb <address>                - Display the Buffer Control Block
!Kdexts.biosreslist <address>        - Dump PnpBios/ACPI resource list
!Kdexts.blockeddrv                   - Dumps the list of blocked drivers in the system
!Kdexts.bpid <pid>                   - Tells winlogon to do a user-mode break into
!Kdexts.                               process <pid>
!Kdexts.bugdump                      - Display bug check dump data
!Kdexts.bushnd [address]             - Dump a HAL "BUS HANDLER" structure
!Kdexts.ca <address> [flags]         - Dump the control area of a section
!Kdexts.calldata <table name>        - Dump call data hash table
!Kdexts.cchelp                       - Display Cache Manager debugger extensions
!Kdexts.chklowmem                    - Tests if PAE system booted with /LOWMEM switch
!Kdexts.cmreslist <CM Resource List> - Dump CM resource list
!Kdexts.cpuinfo [id]                 - Displays CPU information for specified processor
!Kdexts.dbgprint                     - Displays contents of DbgPrint buffer
!Kdexts.dblink <address> [count] [bias] - Dumps a list via its blinks
!Kdexts.dflink <address> [count] [bias] - Dumps a list via its flinks
!Kdexts.deadlock [1]                 - Display Driver Verifier deadlock detection info
!Kdexts.defwrites                    - Dumps deferred write queue & cache write
!Kdexts.                               throttle analysis
!Kdexts.devext [<address> <type>]    - Dump device extension of specified type
!Kdexts.devhandles [<address>]       - Dumps open handles against the specified device
!Kdexts.devinst                      - dumps the device reference table
!Kdexts.devnode <device node> [flags] [service] - Dump the device node
!Kdexts.devobj <device>              - Dump the device object and Irp queue
!Kdexts.devpowerstate [device node]  - Dumps the device node with the power state and all attached devices
!Kdexts.devstack <device>            - Dump device stack associated w/device object
!Kdexts.dma [<adapter> [flags]]      - Displays Direct Memory Access subsystem info
!Kdexts.dpa [options]                - Displays pool allocations
!Kdexts.dpcs [processor]             - Dumps the queued DPCs
!Kdexts.dpcwatchdog                  - Dumps the DPC history of all processsors
!Kdexts.driveinfo <drive>[:]         - Dump drive volume information for specific drive
!Kdexts.drivers                      - Display info about loaded system modules
!Kdexts.drvobj <driver> [flags]      - Dump the driver object and related information
!Kdexts.dskheap                      - Dump desktop heap
!Kdexts.e820reslist <List>           - Dump an ACPI_BIOS_MULTI_NODE resource list
!Kdexts.errlog                       - Dump the error log contents
!Kdexts.exqueue [flags]              - Dump the ExWorkerQueues
!Kdexts.exrlog                       - Display the exception log
!Kdexts.facs                         - Dumps the Firmware ACPI Control Structure
!Kdexts.fadt                         - Dumps the Fixed ACPI Description Table
!Kdexts.filecache                    - Dumps information about the file system cache
!Kdexts.filelock <address>           - Dump a file lock structure - address is either
!Kdexts.                               the filelock or a fileobject
!Kdexts.filetime                     - Dumps 64-bit FILETIME as a human-readable time
!Kdexts.findautochkblockers          - Dumps file handles and file-names which are
!Kdexts.                               preventing autochk from running
!Kdexts.finddata <address> <offset>  - Find cached data at given offset in FILE_OBJECT
!Kdexts.findhandle <object> <process | 0> - Find handles referring to the specified object
!Kdexts.findthreads [-v] [-t <addr>]|[-i <addr>]|[-d <addr>]|[-a <addr> [-e <addr>|-l <length>]] - Find threads with stack-locations referencing a given object/memory range
!Kdexts.fpsearch <address>           - Find a freed special pool allocation
!Kdexts.frag [flags]                 - Kernel mode pool fragmentation
!Kdexts.frozen                       - Show processor states (Current,Frozen,Running)
!Kdexts.gbl                          - Dumps the ACPI Global Lock
!Kdexts.gentable <address> [flags]   - Dumps the given rtl_generic_table
!Kdexts.handle <addr> <flags> <process> <TypeName> -  Dumps handle for a process
!Kdexts.help                         - Displays this list
!Kdexts.hidppd <address> <flags>     - Dump Preparsed Data of HID device
!Kdexts.ib <port>                    - Read a byte from an I/O port
!Kdexts.id <port>                    - Read a double-word from an I/O port
!Kdexts.idt <vector>                 - Dump ISRs referenced by each IDT entry
!Kdexts.ioresdes <address>           - Display IO_RESOURCE_DESCRIPTOR structure
!Kdexts.ioreslist <IO Resource List> - Dump IO resource requirements list
!Kdexts.ipi                          - Dump IPI processors state
!Kdexts.iw <port>                    - Read a word from an I/O port
!Kdexts.irp <address> <dumplevel>    - Dump IRP at specified address
!Kdexts.irpfind [pooltype] [restart addr] [<irpsearch> <address>]
!Kdexts.                             - Search pool for active IRPs
!Kdexts.irql [processor]             - Display current IRQL for processor
!Kdexts.isainfo <address> [flags]    - Display ISA Bus and Card info
!Kdexts.job <address> [flags]        - Dump JobObject at address, processes in job
!Kdexts.joblist [flags]              - Displays all active job objects
!Kdexts.lbt                          - Dump legacy bus information table
!Kdexts.loadermemorylist <address>   - Display OSLOADER memory allocation list
!Kdexts.locks [-v] <address>         - Dump kernel mode resource locks
!Kdexts.logonsession [<LUID> [level]]  - Display logon sessions
!Kdexts.lookaside <address> <options> <depth> - Dump lookaside lists
!Kdexts.lpc                          - Dump lpc ports and messages
!Kdexts.mapic                        - Dumps the ACPI Multiple APIC Table
!Kdexts.mca <address>                - Display Machine Check Architecture registers
!Kdexts.memlist                      - Scans physical memory lists for consistency
!Kdexts.memusage                     - Dumps the page frame database table
!Kdexts.nsobj   <address>            - Dumps an ACPI Namespace Object
!Kdexts.nstree [<address>]           - Dumps an ACPI Namespace Object tree
!Kdexts.numa                         - Display Non-Uniform Memory Access nodes
!Kdexts.numa_hal                     - Display HAL NUMA info
!Kdexts.ob <port>                    - Write a byte to an I/O port
!Kdexts.object <-r | Path | address | 0 TypeName>  - Dumps an object manager object
!Kdexts.obtrace <address|object>     - Display object trace information
!Kdexts.od <port>                    - Write a double-word to an I/O port
!Kdexts.openmaps <shared cache map > - Dumps the active views for a shared cache map
!Kdexts.ow <port>                    - Write a word to an I/O port
!Kdexts.pcitree                      - Dump the PCI tree structure
!Kdexts.pcm <address>                - Detects valid address for Private Cache Map
!Kdexts.pagefile                     - Dumps pagefile information and related device stacks
!Kdexts.pcmcia [1]                   - Displays PCMCIA devices and their states
!Kdexts.pcr [processor]              - Dumps the Processor Control Registers
!Kdexts.pfn                          - Dumps the page frame database entry for the
!Kdexts.                               physical page
!Kdexts.pnpaction                    - Dump PNP action queue
!Kdexts.pnpcompletion                - Dump PNP completion queue
!Kdexts.pnpevent <event entry>       - Dump PNP events
!Kdexts.pnplocks                     - Dump PNP locks
!Kdexts.pnpthreads                   - Dump active Pnp thread if any
!Kdexts.pnptriage                    - 'x' command for Pnp - dumps basic info useful for triage
!Kdexts.pocaps                       - Dumps System Power Capabilities.
!Kdexts.podev <devobj>               - Dumps power relevent data in device object
!Kdexts.polist [<devobj>]            - Dumps power Irp serial list entries
!Kdexts.ponode                       - Dumps power Device Node stack (devnodes in
!Kdexts.                               power order)
!Kdexts.pool [<0|-1|address> [detail]] - Dump kernel mode heap
!Kdexts.poolfind Tag [pooltype] -    - Finds occurrences of the specified Tag
!Kdexts.poolused [flags [TAG]]       - Dump usage by pool tag
!Kdexts.popolicy [<address> [flags]] - Dumps System Power Policy.
!Kdexts.poproc [<address> [flags]]   - Dumps Processor Power State.
!Kdexts.poprocpolicy [<address> [flags]] - Dumps Processor Power Policy.
!Kdexts.poreqlist [<devobj>]         - Dumps PoRequestedPowerIrp created Power Irps
!Kdexts.posettings [/?]              - Dumps the power settings database
!Kdexts.potrigger <address>          - Dumps POP_ACTION_TRIGGER.
!Kdexts.powertriage                  - Dumps basic information useful for triage of power related issues
!Kdexts.pplookaside [processor] [lookasidelist] - Dumps PerProcessor LookasideLists.
!Kdexts.prcb [processor]             - Displays the Processor Control Block
!Kdexts.process [<address>] [flags] [image name] - Dumps process at specified address
!Kdexts.pte <address>                - Dump PDE and PTE for the entered address
!Kdexts.ptov PhysicalPageNumber      - Dump all valid physical<->virtual mappings
!Kdexts.                               for the given page directory
!Kdexts.qlocks                       - Dumps state of all queued spin locks
!Kdexts.range <RtlRangeList>         - Dump RTL_RANGE_LIST
!Kdexts.ready                        - Dumps state of all READY system threads
!Kdexts.reg [<command> [params]]     - Registry extensions
!Kdexts.rellist <relation list> [flags] - Dump PNP relation lists
!Kdexts.remlock                      - Dump a remove lock structure
!Kdexts.rsdt                         - Displays the ACPI Root System Description Table
!Kdexts.running [-t] [-i]            - Displays the running threads in the system
!Kdexts.scm <address>                - Detects valid address for Shared Cache Map
!Kdexts.session [-?] [-s] <id> [flags] [image name] - Dumps sessions
!Kdexts.sprocess [<id|-1> [flags]]   - Displays session processes
!Kdexts.srb <address>                - Dump Srb at specified address
!Kdexts.stacks <detail-level>        - Dump summary of current kernel stacks
!Kdexts.swd                          - Dump Software Watchdog state
!Kdexts.sysinfo                      - Dump SMBios, ACPI, and CPU info
!Kdexts.sysptes                      - Dumps the system PTEs
!Kdexts.thread [<address> [flags]]   - Dump current thread, specified thread, or stack
!Kdexts.                               containing address
!Kdexts.timer                        - Dumps timer tree
!Kdexts.tokenleak [<0>|<1> <ProcessCid> <BreakCount> <MethodWatch>]
!Kdexts.                             - Activates token leak tracking
!Kdexts.tunnel <address>             - Dump a file property tunneling cache
!Kdexts.trueref <address> [<process>] - Displays the refcount of the specified object
!Kdexts.tz [<address> <flags>]       - Dumps Thermal Zones. No Args dumps All TZs
!Kdexts.tzinfo <address>             - Dumps Thermal Zone Information.
!Kdexts.ubc [*|<bpid>]               - Clears a user-space breakpoint
!Kdexts.ubd [*|<bpid>]               - Disables a user-space breakpoint
!Kdexts.ube [*|<bpid>]               - Enables a user-space breakpoint
!Kdexts.ubl                          - Lists all user-space breakpoint
!Kdexts.ubp <address>                - Sets a user-space breakpoint
!Kdexts.vad                          - Dumps VADs
!Kdexts.verifier                     - Displays Driver Verifier settings and status
!Kdexts.version                      - Version of extension dll
!Kdexts.vm                           - Dumps virtual management values
!Kdexts.vpb <address>                - Dumps volume parameter block
!Kdexts.vtop DirBase address         - Dumps physical page for virtual address
!Kdexts.whatperftime <perf>          - Converts performance time to HH:MM:SS.mmm
!Kdexts.whattime <ticks>             - Converts ticks to HH:MM:SS.mmm
!Kdexts.wsle [<flags> [address]]     - Display Working Set List Entries
!Kdexts.zombies [<flags> [address]]  - Find all zombie processes

!wmitrace.Tprint
!wmitrace.buffer
!wmitrace.capturestate
!wmitrace.guidfile
!wmitrace.kd
!wmitrace.ptdump
!wmitrace.regtable
!wmitrace.systrace
!wmitrace.tanalyze
!wmitrace.wmiLogDump
!wmitrace.strdump                                - List running loggers
!wmitrace.logger <LoggerId>                      - Dump the logger information
!wmitrace.logdump <LoggerId> [-t n] [-tmf GUIDFile] [-man Man1 Man2 ... ManN] [-xml] [-of file]
                                                 - Dump the in-memory portion of a log file.
                                                   [-t n]: Dump the last n events, sorted by timestamp.
                                                   [-tmf GUIDFile]: Specify the tmf file for WPP events.
                                                   [-man Man1 Man2 ... ManN]: Specify a list of manifest files for ETW events.
                                                   [-xml]: Dump the events in xml format.
                                                   [-of file]: Dump the events in file, instead of the debugger console.
!wmitrace.logsave  <LoggerId>  <Save file name>  - Save the in-memory portion of a log to an .etl file
!wmitrace.searchpath  [+]  <Path>                - Set the trace format search path
!wmitrace.manpath <Path>                         - Set the manifest search path
!wmitrace.tmffile <filename>                     - Set the TMF file name (default is 'default.tmf')
!wmitrace.setprefix [+] <TraceFormatPrefix>      - Set the prefix format.
                                                   (default for WPP events: [%9!d!]%8!04X!.%3!04X!::%4!s! [%1!s!])
                                                   (default for ETW events: [%9!d!]%8!04X!.%3!04X!::%4!s! [EventId=%2!s!])
!wmitrace.start LoggerName [-cir n] [-seq n] [-f file] [-b n] [-max n] [-min n] [-kd] [-ft n] [-singlestream [0|1]]
                                                 - Start the logger. For circular and sequential file maximum file size
                                                   can be provided. Default is buffered mode. Other arguments: filename,
                                                   buffer size, max and min buffers, flush timer, KdFilter.
!wmitrace.enable LoggerId GUID [-level n] [-matchallkw n] [-matchanykw n] [-enableproperty n] [-flag n]
!wmitrace.                                       - Enable provider. Level, keywords, flags and enableproperty can be provided
!wmitrace.stop <LoggerId>                        - Stop the logger.
!wmitrace.disable LoggerId GUID                  - Disable provider.
!wmitrace.kdtracing <LoggerId> <0|1>             - Turn live tracing messages on (1) or off (0) for a particular logger.
!wmitrace.dynamicprint <0|1>                     - Turn live tracing messages on (1) or off (0).  Default is on.
!wmitrace.traceoperation <0|1|2>                 - Verbose output. Default is OFF (debugging feature).
!wmitrace.dumpmini                               - Dump the system trace fragment stored in a minidump.
!wmitrace.dumpminievent                          - Dump the system event log trace fragment from a minidump.
!wmitrace.eventlogdump <LoggerId>                - Dump a logger using eventlog formatting.
!wmitrace.bufdump <LoggerId>                     - Dump the Wmi Trace Loggers Buffers
!wmitrace.guid [Options] [Flags]                 - Dump a given Registered Provider Guid with Enable Info.

!Rpcexts.IF                - Dumps an RPC Interface
!Rpcexts.addrvect          - Dumps the address vector at the given location
!Rpcexts.ama               - Displays the ALPC message attributes
!Rpcexts.asyncmsg          - Dumps NDR_ASYNC_MESSAGE
!Rpcexts.asyncrpc          - Dumps RPC_ASYNC_STATE
!Rpcexts.authinfo          - Dumps CLIENT_AUTH_INFO
!Rpcexts.copacket          - Dumps CO packet
!Rpcexts.dict              - Dumps SDICT
!Rpcexts.dict2             - Dumps SDICT2
!Rpcexts.eeinfo            - Prints the extended error info chain
!Rpcexts.eerecord          - Prints the extended error info record given
!Rpcexts.error             - Translates an error value into the error message
!Rpcexts.fwscan            - Searches for a string pattern in the RpcFw log
!Rpcexts.getcallinfo       - Searches the system for call info
!Rpcexts.getclientcallinfo - Searches the system for client call info
!Rpcexts.getdbgcell        - Gets info for the specified cell
!Rpcexts.getendpointinfo   - Searches the system for endpoint info
!Rpcexts.getthreadinfo     - Searches the system for thread info
!Rpcexts.getvalidateerror  - Dumps error code for the failed VALIDATE
!Rpcexts.help              - Displays information on available extension commands
!Rpcexts.listcalls         - Dumps addresses, associations, and calls active within the RPC_SERVER at address
!Rpcexts.lpcaddr           - Dumps LRPC_ADDRESS
!Rpcexts.lpcbh             - Dumps LRPC_BINDING_HANDLE
!Rpcexts.lpcca             - Dumps LRPC_CASSOCIATION
!Rpcexts.lpcccall          - Dumps LRPC_CCALL
!Rpcexts.lpcsa             - Dumps LRPC_SASSOCIATION
!Rpcexts.lpcscall          - Dumps LRPC_SCALL
!Rpcexts.mode              - Switches the extensions to debug one of these 3 modes (rpcrt4, msrpc, rhttpaa). Default is rpcrt4
!Rpcexts.obj               - Dumps an RPC Object
!Rpcexts.overlap           - Dumps object associated with OVERLAPPED pointer
!Rpcexts.pasync            - Dumps RPC_ASYNC_STATE
!Rpcexts.pipedesc          - Dumps NDR_PIPE_DESC
!Rpcexts.pipemsg           - Dumps NDR_PIPE_MESSAGE
!Rpcexts.pipestate         - Dumps NDR_PIPE_STATE
!Rpcexts.protocols         - Dumps PnP protocols map & related objects
!Rpcexts.queue             - Dumps QUEUE
!Rpcexts.rpcheap           - Dumps rpc heap on checked builds
!Rpcexts.rpcmsg            - Dumps RPC_MESSAGE
!Rpcexts.rpcreadstack      - Reads an RPC client side stack and retrieves the call info
!Rpcexts.rpcsvr            - Dumps RPC_SERVER
!Rpcexts.rpctime           - Displays current system time
!Rpcexts.rpcverbosestack   - Toggles the state of the verbose spew when reading the stack
!Rpcexts.rpcverifier       - Dumps the RPC verifier settings
!Rpcexts.scan              - Dumps the event log
!Rpcexts.secinfo           - Dumps security provider/package info
!Rpcexts.sizes             - Prints sizes of the data structures
!Rpcexts.stackmatch        - Matches stack symbols and target addresses
!Rpcexts.stubmsg           - Dumps MIDL_STUB_MESSAGE
!Rpcexts.thread            - Dumps the RPCRT4 thread object
!Rpcexts.traceasynccall    - Traces an LRPC call chain starting with a given RPC_ASYNC_STATE object
!Rpcexts.tracesynccall     - Traces an LRPC call chain starting with a given thread
!Rpcexts.trans             - Dumps most NT RPC transport objects
!Rpcexts.transinfo         - Dumps TRANS_INFO
!Rpcexts.version           - Prints version information for the current rpc extension library